---
title: "Predicting gene expression from growth factor, cell line and treatment"
author: "Alexandra Stephenson"
date: today
format: 
  pdf:
    self-contained: true
    df-print: tibble
editor_options:
  chunk_output_type: console
execute:
  warning: false
  message: false
  echo: false
bibliography: references.bib
---

```{r}
pacman::p_load(tidyverse, readr, lme4, knitr, performance, sjPlot, lmerTest)
options(knitr.kable.NA = "")
theme_set(theme_light())
data <- read_csv("data/2023-03-01_gene-data.csv")
data_long <- data %>%
  mutate(CL = `cell line`,
         treat = treatment) %>%
  unite(`cell line`, `treat`, sep = "; ", col = "grouping") %>%
  pivot_longer(cols = 4:14, names_to = "concentration", values_to = "GE") %>%
  filter(GE >= 0) %>%
  mutate(concentration = as.integer(concentration),
         GL = as.factor(sheet_names),
         CL = as.factor(CL),
         treatment = as.factor(treatment),
         grouping = as.factor(grouping))
```

# Introduction
The data set consists of eight gene lines, each with one of two cell lines (wild-type or cell-type 101), one of two treatments (the placebo treatment or activating factor 42), and eleven different concentrations of growth factor (recorded in mg/ml). Thus, for each pair of cell line and treatment, there are two gene lines, each with eleven concentrations of growth factor (from $0$ to $10$). Only one data point is missing, that of concentration $5$ mg/ml for gene line GL-fUg (with cell line wild-type and treatment activating factor 42). 

This report investigates the impact of growth factor concentration, treatment, and cell line on gene expression, as well as the effect of gene line.

# Method

The data was cleaned and analysed using the R language [@r-2022], and the packages <!--ggpubr [@ggpubr], ggrepel [@ggrepel]-->, knitr [@knitr], lme4 [@lme4], lmerTest [@lmerTest], <!--patchwork [@patchwork]-->, performance [@performance], readr [@readr]<!--, rstatix [@rstatix], showtext [@showtext]-->, sjPlot [@sjPlot], and tidyverse [@tidyverse]. Any data points recorded as $-99$ were taken to indicate no data was recorded, or `NA`.

Exploratory data analysis was then conducted on the data, including plotting gene expression versus concentration, gene expression versus cell line, and gene expression versus treatment.

Several mixed effects models were then fit, and compared using Akaike's Information Criterion (AIC), R$^{2}$ values and root mean squared error.

# Results

<!-- **ASSUMPTIONS CHECKING** -->

```{r fig-ge-cl-boxplot, fig.cap = "A boxplot of gene expression for each cell line (wild-type and cell-type 101)."}
data_long %>%
  ggplot(aes(x = CL, y = GE, col = CL)) +
  geom_boxplot() +
  theme(legend.position = 'none') +
  harrypotter::scale_color_hp_d("Ravenclaw") +
  labs(x = "Cell line",
       y = "Gene expression")
```

A boxplot of gene expression, grouped by cell line, is shown in @fig-ge-cl-boxplot. From this boxplot, it can be seen that there does not appear to be a significant difference between gene expression for wild-type and gene expression for cell-type 101. This suggests that cell line may not be a predictor of gene expression, or at least, not on its own.

```{r fig-ge-treat-boxplot, fig.cap = "A boxplot of gene expression for each treatment (placebo and activating factor 42)."}
data_long %>%
  ggplot(aes(x = treatment, y = GE, col = treatment)) +
  geom_boxplot() +
  theme(legend.position = 'none') +
  harrypotter::scale_color_hp_d("Ravenclaw") +
  labs(x = "Treatment",
       y = "Gene expression")
```

@fig-ge-treat-boxplot shows a boxplot of gene expression for each treatment type (placebo or activating factor 42). From this boxplot, it can be seen that there does appear to be a difference between gene expression for placebo and gene expression for activating factor 42. This suggests that treatment is a predictor of gene expression.

```{r fig-ge-conc-grouping, fig.cap = "A plot of gene expression as a function of concentration, coloured by cell line (wild-type or cell-type 101) and treatment (placebo or activating factor 42)."}
data_long %>%
  ggplot(aes(x = concentration, y = GE, color = grouping)) +
  geom_point() +
  ylim(0, NA) +
  harrypotter::scale_color_hp_d("Ravenclaw") +
  labs(x = "Concentration (mg/ml)",
       y = "Gene expression",
       color = "Cell Line; Treatment")
```

The data is plotted in @fig-ge-conc-grouping, with gene expression on the y axis and concentration on the x axis, with the data points coloured by cell line and treatment. 
From this plot, it can be seen that there does appear to be a relationship between concentration and gene expression, which suggests that concentration is a predictor of gene expression.
From @fig-ge-conc-grouping, it can be seen that there appear to be differences between the pairs (cell-type 101, placebo) and (wild-type, placebo) and the other two pairs of cell line and treatment. However, there does not appear to be a difference between (cell-type 101, activating factor 42) and (wild-type, activating factor 42). This suggests that for the placebo treatment, cell line has an impact on gene expression, but for the activating factor, cell line may not have an impact on gene expression. Thus, cell line may be a predictor for gene expression.

<!-- **REPEATED MEASURES HERE** -->
Given that the gene expression for each cell line and treatment was measured for different concentrations of growth factor for the same gene line, then this must be taken into account in fitting models on the data.

## Fixed effect model

A linear model can be fit using the `step` function to select the best model based on AIC, where the full scope is gene expression as a function of concentration, treatment, and cell line, with interaction terms between all three predictors. 
<!-- Gene line is not included as it is an additional parameter to be controlled for, not a possible predictor to be included in the model.  -->
Using AIC, the function selects the full model as the best model.
```{r}
lm_null <- lm(GE ~ 1, data = data_long)
scope <- GE ~ concentration*treatment*CL
lm_step <- step(lm_null, scope = scope, direction = "both", trace = 0)
```

The statistical significance of the terms in the selected model can be found using an ANOVA test. @tbl-sjPlot-step shows the results of the ANOVA test conducted upon the selected fixed effect model, from which it can be seen that all of the terms are statistically significant.

```{r}
#| label: tbl-sjPlot-step
#| tbl-cap: "An ANOVA table showing the statistical significance of each predictor in the fixed effects model."
lm_step <- lm(GE ~ concentration*treatment*CL, data = data_long)
anova(lm_step) %>% kable(digits = c(0,5,5,6,6))
```

## Mixed effects models

However, this does not consider the impact of gene line. A model can be fitted for gene expression as a function of concentration, with gene line as a random effect. The residuals plot for this model is shown in @fig-m1-plot. From this figure, it can be seen that there is still variance not explained by concentration alone, so this model will not be considered further.

```{r}
m1 <- lmer(GE ~ concentration + (1|GL), data = data_long, na.action = na.omit)
```
```{r fig-m1-plot, fig.cap = "The residuals plot for the model of gene expression as a function of concentration, with gene line as a random effect."}
plot(m1)
```

The next model considered fits gene expression as a function of concentration and treatment (with interaction terms), as well as gene line as a random effect. The residuals plot for this model is shown in @fig-m2-plot.

```{r}
m2 <- lmer(GE ~ concentration*treatment + (1|GL), data = data_long, na.action = na.omit)
```
```{r fig-m2-plot, fig.cap = "The residuals plot for the model of gene expression as a function of concentration and treatment (with interaction terms), with gene line as a random effect."}
plot(m2)
```

Two models are fitted that include cell line as a predictor. One with interaction terms between concentration and treatment only, and one with interaction terms between concentration, treatment and cell line. The residuals plots for these models are shown in @fig-m3-plot and @fig-m4-plot, respectively.

```{r}
m3 <- lmer(GE ~ concentration*treatment + CL + (1|GL), data = data_long, na.action = na.omit)
```
```{r fig-m3-plot, fig.cap = "The residuals plot for the model of gene expression as a function of concentration and treatment (with interaction terms) and cell line (without any interaction terms), with gene line as a random effect."}
plot(m3)
```
```{r}
m4 <- lmer(GE ~ concentration*treatment*CL + (1|GL), data = data_long, na.action = na.omit)
```
```{r fig-m4-plot, fig.cap = "The residuals plot for the model of gene expression as a function of concentration, treatment and cell line (with interaction terms between all three predictors), with gene line as a random effect."}
plot(m4)
```

The residuals plots in @fig-m2-plot, @fig-m3-plot and @fig-m4-plot all show that there does not seem to be any residual variance for these models.

```{r}
#| label: tbl-sjPlot-m3
#| tbl-cap: "An ANOVA table showing the statistical significance of each fixed effect predictor in the mixed effects model with concentration, treatment and cell line predictors, and an interaction term between concentration and treatment, as well as a gene line random effects."
anova(m3) %>% kable(digits = c(5,5,0,6,6,6))
```

@tbl-sjPlot-m3 shows the statistical significance of each term in the mixed effects model with concentration and treatment (with the interaction term) and cell line (without interactions with this predictor), as well as the gene line random effects. From this table, it can be seen that the cell line predictor is not statistically significant, so this term should be removed from the model. Removing this term results in the mixed effects models with concentration and treatment predictors (with the interaction term) and the gene line random effects. The statistical significance of each term in this model are shown in @tbl-sjPlot-m2, from which it can be seen that all fixed effect terms in this model should be kept.

```{r}
#| label: tbl-sjPlot-m2
#| tbl-cap: "An ANOVA table showing the statistical significance of each fixed effect predictor in the mixed effects model with concentration and treatment predictors, and an interaction term, as well as a gene line random effects."
anova(m2) %>% kable(digits = c(5,5,0,6,6,6))
```

```{r}
#| label: tbl-sjPlot-m4
#| tbl-cap: "An ANOVA table showing the statistical significance of each fixed effect predictor in the mixed effects model with concentration, treatment and cell line predictors, and interaction terms between all of the predictors, as well as a gene line random effects."
anova(m4) %>% kable(digits = c(5,5,0,6,6,6))
```

@tbl-sjPlot-m4 shows the statistical significance of each term in the model with concentration, treatment and cell line as predictors, along with interaction terms between all predictors, and gene line random effects. From this table, it can be seen that the interaction term between concentration, treatment and cell line is statistically significant, so this term should be kept. Because this term should be kept, then all of the other fixed effect terms should also be kept. 

```{r}
#| label: tbl-ranova-m2
#| tbl-cap: "An ANOVA-like table showing the statistical significance of the random effect term in the mixed effects model with concentration and treatment (and the interaction term between these predictors) as fixed effects, showing that the gene line random effect term is statistically significant."
ranova(m2) %>% 
  kable(digits = c(0,4,4,5,4,25))
```

```{r}
#| label: tbl-ranova-m4
#| tbl-cap: "An ANOVA-like table showing the statistical significance of the random effect term in the mixed effects model with concentration, treatment and cell line (and the interaction terms between these predictors) as fixed effects, showing that the gene line random effect term is statistically significant."
ranova(m4) %>% 
  kable(digits = c(0,4,4,5,4,25))
```

The statistical significance of the random effect terms in the mixed effects models can also be tested, as shown in @tbl-ranova-m2 and @tbl-ranova-m4. From these tables, it can be seen that the random effect term in each model is statistically significant, and should therefore be retained.

## Comparing models

```{r}
#| label: tbl-performance-m234
#| tbl-cap: "The AIC, R$^{2}$ values and root mean squared errors for each of the three fitted models."
compare_performance(lm_step, m2, m4) %>% 
  select(c("Name", "AIC", "R2", "R2_conditional", "RMSE")) %>% 
  kable(digits = c(0,4,7,7,6))
```

The fixed effects model and mixed effects models can be compared to each other using AIC values, R$^{2}$ values and RMSE values (shown in @tbl-performance-m234).
From these values, it can be seen that the model with interaction terms between concentration, treatment and cell line has the best AIC. The other two mixed effects models, where there is either no interaction with cell line or cell line is not a predictor, have very similar AIC values, whilst the model without random effects has the worst AIC.
The conditional R$^{2}$ values, which take into account both the fixed effects and the random effects, are very similar for all models, but the model with all interaction terms is still slightly better. The R$^{2}$ value for the fixed effects model is worse than the conditional R$^{2}$ values for the mixed effects models.
The root mean square errors of the first two mixed effects models in @tbl-performance-m234 are very similar, whilst the root mean squared error for the fixed effects model is much greater than the other values. The lowest root mean squared error occurs for the mixed effects model with interaction terms between all three predictors, suggesting that this model is the best.
Thus, the model with interaction terms between all three predictors, and with gene line as a random effect, appears to be the best model.


# Discussion

```{r fig-ge-conc-grouping-model, fig.cap = "A plot of gene expression as a function of concentration, coloured by gene line (with cell line and treatment also indicated), and with the fitted model indicated by the lines."}
data_long %>%
  mutate(group = grouping,
         geneline = GL) %>%
  unite(group, geneline, sep = "; ", col = "grouping2") %>%
  ggplot(aes(x = concentration, y = GE, color = grouping2)) +
  geom_point() +
  geom_line(aes(y = predict(m4))) +
  ylim(0, NA) +
  # scale_color_manual(values=c("#006699", "#006699", "#98C2D9", "#98C2D9", "#D9AC82", "#D9AC82", "#B35900", "#B35900")) +
  harrypotter::scale_color_hp_d("Ravenclaw") +
  labs(x = "Concentration (mg/ml)",
       y = "Gene expression",
       color = "Cell Line; Treatment; Gene Line")
```

The chosen model is the mixed effects model with concentration, treatment and cell line as predictors, along with all interaction terms between the three predictors, and gene line as a random effect. This model is shown as the lines in @fig-ge-conc-grouping-model, where each line is the fitted model for a different gene line. This figure shows how the gene lines with the placebo treatment (in darker brown and lighter blue) have a flatter slope than the gene lines with the activating factor 42 treatment (in lighter brown, grey and darker blue). The slope of the fitted model for the wild-type cell lines with the placebo treatments (in darker brown) is also flatter than the slope of the fitted model for the cell-type 101 cell lines with the placebo treatments (in lighter blue).

The coefficients of the fitted model are shown in @tbl-fixed-coefs-m4, and the random intercepts are shown in @tbl-random-coefs-m4. The intercept for each gene line is found as the overall intercept (in @tbl-fixed-coefs-m4) plus the gene line specific intercept in @tbl-random-coefs-m4.

```{r}
#| label: tbl-fixed-coefs-m4
#| tbl-cap: "The coefficients of the chosen model. The value of the intercept is the overall intercept, which is added to the values in @tbl-random-coefs-m4 to find the intercept for each gene line."
fixef(m4) %>% 
  data.frame() %>% 
  rename(value = ".") %>%
  kable()
```

```{r}
#| label: tbl-random-coefs-m4
#| tbl-cap: "The difference from the overall intercept for each gene line."
random_effects <- ranef(m4)$GL
random_effects %>%
  rename(value = `(Intercept)`) %>% 
  kable()
```

From these tables, it can be seen that as growth factor concentration increases, so does gene expression. It can also be seen that the placebo treatment has a smaller intercept and flatter slope than the activating factor 42 treatment does. Similarly, the wild-type cell line has a lower intercept and flatter slope than the cell-type 101 cell line does. 
Thus, gene expression is higher for higher concentrations of the growth factor, the activating factor 42 treatment and cell-type 101 cell line. Conversely, lower concentrations of the growth factor, the placebo treatment and wild-type cell line results in lower gene expression.

<!-- $$ -->
<!-- \text{gene expression} = 9.9175 + \text{gene line intercept} -4.215909(\text{placebo treatment}) -0.3615634(\text{wild-type cell line}) + 0.0817907(\text{placebo treatment})(\text{wild-type cell line}) + (3.0514091 -1.4055(\text{placebo treatment}) - 0.1214545(\text{wild-type cell line}) - 0.9674091(\text{placebo treatment})(\text{wild-type cell line}))(\text{concentration}) -->
<!-- $$ -->

<!-- The fitted model has the coefficients shown in @tbl-coefs-m4. -->

<!-- ```{r} -->
<!-- #| label: tbl-coefs-m4 -->
<!-- #| tbl-cap: "**CAPTION**" -->
<!-- fixed_effects <- fixef(m4) -->
<!-- random_effects <- ranef(m4)$GL -->
<!-- coefs <- random_effects -->
<!-- # orig_rows <- rownames(coefs) -->
<!-- # overall_intercept <- fixed_effects[[1]] -->
<!-- coefs <- coefs %>% rename('value' = `(Intercept)`) -->
<!-- for (i in 1:length(rownames(coefs))) { -->
<!--   row.names(coefs)[i] <- paste(rownames(coefs)[i], "(Intercept)", sep = '') -->
<!--   coefs[[1]][i] <- coefs[[1]][i] + fixed_effects[[1]] -->
<!-- } -->
<!-- for (i in 2:8) { -->
<!--   coefs <- coefs %>% add_row(value = fixed_effects[[i]]) -->
<!--   row.names(coefs)[length(rownames(coefs))] <- names(fixed_effects)[i] -->
<!-- } -->
<!-- coefs %>%  -->
<!--   mutate(names = rownames(coefs)) %>%  -->
<!--   pivot_wider(names_from = names, values_from = value) %>%  -->
<!--   kable() -->
<!-- ``` -->

\newpage
# Appendix: Code {.appendix}
```{r ref.label=knitr::all_labels()}
#| eval: false
#| echo: true
#| tidy: true
```

\newpage
# References {.appendix}
